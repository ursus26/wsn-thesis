import numpy as np
import matplotlib.pyplot as plt

## 5 seconds round time, 25 joules.
# time_stamps1 = np.array([27.09181, 30.03392, 30.05313, 30.11464, 30.16655,
#                          30.25896, 30.29347, 30.3418, 30.38719, 31.284210])


# time_stamps2 = np.array([32.44991, 32.48682, 32.52723, 32.56984, 32.73075,
#                          33.01876, 34.07287, 35.74578, 36.00839, 36.036610,
#                          36.041411, 36.080412, 36.148113, 36.208514, 36.258415,
#                          36.260716, 36.700817, 36.721318, 38.619, 38.799720,
#                          38.99121, 39.236722, 39.568823, 39.593124, 40.296925])
#
# time_stamps3 = np.array([25.34091, 25.35462, 25.35643, 25.36464, 25.38625,
#                          25.39636, 25.42097, 25.42248, 25.42829, 25.429910,
#                          25.431211, 25.431512, 25.434713, 25.434714, 25.438215,
#                          25.439916, 25.442117, 25.443118, 26.910519, 27.355820,
#                          27.387221, 27.520222, 27.554623, 27.606224, 27.722225,
#                          27.761426, 27.941227, 27.950828, 27.952429, 28.044830,
#                          28.101231, 28.163232, 28.207133, 28.216134, 28.228135,
#                          28.239636, 28.275637, 28.282438, 28.317839, 28.320540,
#                          28.344541, 28.35242, 28.354643, 28.373544, 28.422245,
#                          28.455446, 28.460147, 28.506648, 28.522149, 28.533950,
#                          28.535751, 28.540752, 28.568153, 28.609554, 28.618855,
#                          28.682456, 28.694657, 30.011458, 30.025259, 30.083360,
#                          30.171761, 30.454362, 30.460763, 30.481964, 30.521665,
#                          30.542866, 30.566267, 30.710568, 30.741869, 30.742570,
#                          30.783171, 30.905772, 30.911773, 30.912874, 30.973275,
#                          31.122876, 31.139177, 31.150178, 31.185779, 31.20580,
#                          31.252181, 31.277782, 31.333783, 31.420184, 31.426585,
#                          31.561186, 31.656887, 31.712788, 31.819689, 31.85190,
#                          31.853891, 31.937492, 31.954693, 32.061494, 32.151495,
#                          33.042496, 33.717597, 33.938798, 35.043399, 36.9863100])


# 3 second round time, 25 joules, 10 nodes.
time_stamps1 = np.array([27.02721, 29.18042, 29.73543, 29.75464, 29.82155,
                         31.03676, 31.28527, 31.4918, 32.10729, 32.171110])

# 25 joules, 25 nodes
time_stamps2 = np.array([30.83151, 30.8352, 30.8443, 30.8484, 30.86595,
                         30.99496, 32.14757, 32.16618, 32.17269, 32.336810,
                         33.015111, 33.055112, 33.283413, 33.429714, 33.596215,
                         33.775116, 33.776617, 33.926318, 34.345819, 34.545420,
                         34.660621, 34.846422, 35.459323, 35.645224, 35.76925])


# 25 joules, 50 nodes
time_stamps3 = np.array([25.81241, 27.14222, 27.18053, 27.26834, 27.34345,
                         28.05266, 28.11387, 28.17978, 28.26939, 28.271710,
                         28.310411, 28.322512, 28.457313, 28.693714, 28.705115,
                         28.735216, 28.825317, 29.109518, 29.343819, 29.36520,
                         29.418721, 29.541822, 29.573623, 29.602924, 29.68525,
                         29.701926, 29.71427, 29.770328, 29.844129, 29.847730,
                         29.980931, 30.088732, 30.416533, 30.432234, 30.445135,
                         30.723336, 30.728137, 30.808738, 31.038939, 31.373340,
                         31.457641, 31.556742, 31.589143, 31.692544, 31.712245,
                         31.81446, 32.175447, 32.577848, 33.40949, 33.530950])


# 25 joules, 75 nodes
time_stamps4 = np.array([25.59081, 25.64512, 25.64573, 25.64594, 25.65555,
                         25.65566, 26.28237, 26.4878, 26.65869, 26.7610,
                         26.849611, 26.854212, 26.891113, 26.936414, 26.966815,
                         26.985616, 27.009917, 27.041518, 27.065619, 27.120820,
                         27.151721, 27.17822, 27.285123, 27.292124, 27.371725,
                         27.676626, 27.771227, 27.878928, 27.900429, 27.999730,
                         28.135131, 28.227332, 28.284833, 28.288934, 28.335635,
                         28.36236, 28.396737, 28.406238, 28.447739, 28.471440,
                         28.527541, 28.668442, 28.672943, 28.805344, 28.936345,
                         28.956646, 28.965247, 28.9748, 28.971849, 28.986850,
                         29.32451, 29.363652, 29.393753, 29.413754, 29.470155,
                         29.52456, 29.53557, 29.626958, 29.72959, 29.868260,
                         29.888561, 30.031862, 30.075663, 30.096964, 30.141365,
                         30.188566, 30.392867, 30.568, 30.719269, 30.739770,
                         31.008971, 31.098972, 31.44673, 31.843674, 32.092875])

# 25 joules, 100 nodes
time_stamps5 = np.array([25.28441, 25.29012, 25.29723, 25.29764, 25.30545,
                         25.33576, 25.33617, 25.33728, 25.33739, 25.338610,
                         25.338911, 25.340412, 25.342613, 25.345914, 25.346115,
                         25.346416, 25.924717, 26.001318, 26.024619, 26.341320,
                         26.459121, 26.472122, 26.493523, 26.495824, 26.504125,
                         26.513426, 26.533827, 26.552828, 26.560929, 26.569430,
                         26.584131, 26.592232, 26.61533, 26.62234, 26.633335,
                         26.63536, 26.661337, 26.717538, 26.764739, 26.804740,
                         26.831841, 27.068642, 27.078643, 27.312744, 27.319645,
                         27.335846, 27.339847, 27.371548, 27.393649, 27.436250,
                         27.441751, 27.443652, 27.449553, 27.450154, 27.481555,
                         27.621856, 27.632757, 27.63558, 27.638159, 27.662760,
                         27.696661, 27.72162, 27.726163, 27.726964, 27.746165,
                         27.747766, 27.78267, 27.822568, 27.895669, 27.912670,
                         27.941971, 28.018272, 28.033673, 28.053274, 28.079175,
                         28.108376, 28.134977, 28.144478, 28.190179, 28.240480,
                         28.307181, 28.322982, 28.376483, 28.625284, 28.648885,
                         28.787686, 28.821587, 28.924188, 28.960589, 28.968790,
                         28.979491, 29.015792, 29.09593, 29.176594, 29.404395,
                         29.727996, 29.848497, 29.886698, 29.931486, 29.984621])



# 50 joule, 50 nodes.
# time_stamps4 = np.array([54.49041, 55.15352, 55.8493, 55.91154, 56.0675,
#                          56.55996, 56.97757, 56.998, 57.03479, 57.109610,
#                          57.425511, 57.740112, 57.900113, 57.94314, 58.107215,
#                          58.136416, 58.171417, 58.376818, 58.377719, 58.539220,
#                          58.547721, 58.949422, 59.002723, 59.010124, 59.192525,
#                          59.378626, 59.444927, 59.676528, 59.771929, 59.865730,
#                          60.215431, 60.426732, 60.498433, 60.571634, 61.04235,
#                          61.071936, 61.10937, 61.408238, 61.428539, 61.623440,
#                          61.643441, 61.828942, 62.144843, 62.490144, 62.992545,
#                          63.40246, 63.475947, 63.858214, 63.953012, 63.964809])


# 50 joule 25 nodes
energy2 = np.array([58.27761, 60.72222, 61.38553, 62.6244, 62.79515,
                         62.91866, 63.14987, 63.67078, 63.8179, 64.081510,
                         64.182411, 64.202612, 64.44413, 64.479514, 64.864615,
                         64.976616, 65.089717, 65.257318, 65.661519, 66.022120,
                         66.133621, 66.447122, 66.512123, 66.741424, 67.367325])

# 75 joule, 25 nodes
energy3 = np.array([89.721, 90.91932, 90.97643, 92.87244, 93.44155, 93.82846,
                    93.86127, 94.01868, 94.02179, 94.071810, 95.361211,
                    95.410312, 96.310813, 96.321414, 96.379915, 96.537616,
                    96.541917, 97.375318, 97.465519, 98.209520, 98.262321,
                    98.505522, 98.97723, 100.55924, 101.18225])

# 100 joule, 25 nodes
energy4 = np.array([122.6081, 122.9752, 124.6493, 125.084, 126.0525, 126.3596,
                    126.5277, 126.8658, 127.1219, 127.48610, 128.05611,
                    128.33312, 128.69213, 129.1614, 129.18615, 129.20416,
                    129.5117, 130.21218, 130.29119, 131.70120, 132.54821,
                    133.80922, 133.84523, 134.96424, 135.6125])

round_time = 3


def plot_network_size():
    global time_stamps
    global round_time

    num_rounds = np.around(time_stamps5[-1] / round_time)

    x = np.arange(1, num_rounds + 5)
    y1 = np.full(x.shape, time_stamps1.size)
    y2 = np.full(x.shape, time_stamps2.size)
    y3 = np.full(x.shape, time_stamps3.size)
    y4 = np.full(x.shape, time_stamps4.size)
    y5 = np.full(x.shape, time_stamps5.size)


    for i in x:
        round_end = i * round_time

        for j in time_stamps1:
            if j < round_end:
                y1[int(i - 1)] = y1[int(i - 1)] - 1

        for j in time_stamps2:
            if j < round_end:
                y2[int(i - 1)] = y2[int(i - 1)] - 1

        for j in time_stamps3:
            if j < round_end:
                y3[int(i - 1)] = y3[int(i - 1)] - 1

        for j in time_stamps4:
            if j < round_end:
                y4[int(i - 1)] = y4[int(i - 1)] - 1

        for j in time_stamps5:
            if j < round_end:
                y5[int(i - 1)] = y5[int(i - 1)] - 1

        # print(round_end)

    # Plot the result.
    plt.figure()
    plt.plot(x, y1, 'x-', c="red")
    plt.plot(x, y2, '^-', c="green")
    plt.plot(x, y3, 'v-', c="blue")
    plt.plot(x, y4, 's-', c="orange")
    plt.plot(x, y5, 'o-', markersize=5, c="k")
    plt.xlabel('Rounds')
    plt.ylabel("Number of alive nodes")
    plt.legend(["10 nodes", "25 nodes", "50 nodes", "75 nodes", "100 nodes"])
    # plt.xticks(np.arange(min(x), max(x)+1, 1.0))
    plt.grid(True)
    plt.show()


def plot_energy():
    global time_stamps
    global round_time

    num_rounds = np.around(energy4[-1] / round_time)
    energy1 = time_stamps2

    x = np.arange(1, num_rounds + 5)
    y1 = np.full(x.shape, energy1.size)
    y2 = np.full(x.shape, energy2.size)
    y3 = np.full(x.shape, energy3.size)
    y4 = np.full(x.shape, energy4.size)


    for i in x:
        round_end = i * round_time

        for j in energy1:
            if j < round_end:
                y1[int(i - 1)] = y1[int(i - 1)] - 1

        for j in energy2:
            if j < round_end:
                y2[int(i - 1)] = y2[int(i - 1)] - 1


        for j in energy3:
            if j < round_end:
                y3[int(i - 1)] = y3[int(i - 1)] - 1

        for j in energy4:
            if j < round_end:
                y4[int(i - 1)] = y4[int(i - 1)] - 1

    plt.figure()
    plt.plot(x, y1, 'x-', c="red", zorder=5)
    plt.plot(x, y2, '^-', c="green", zorder=4)
    plt.plot(x, y3, 'v-', c="blue", zorder=3)
    plt.plot(x, y4, 's-', c="orange", zorder=2)
    plt.xlabel('Rounds')
    plt.ylabel("Number of alive nodes")
    plt.legend(["25 Joule", "50 Joule", "75 joule", "100 joule"])
    plt.grid(True)
    plt.show()


def main():
    plot_network_size()

    # plot_energy()


if __name__ == "__main__":
    main()
